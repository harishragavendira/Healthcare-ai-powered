# -*- coding: utf-8 -*-
"""Copy of Multiple Disease Prediction(Dataset)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DmyoYHMbS0Yd7lMmW5tBGYErWnSp1d6Q
"""

# IMPORTANT: RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES,
# THEN FEEL FREE TO DELETE THIS CELL.
# NOTE: THIS NOTEBOOK ENVIRONMENT DIFFERS FROM KAGGLE'S PYTHON
# ENVIRONMENT SO THERE MAY BE MISSING LIBRARIES USED BY YOUR
# NOTEBOOK.
import kagglehub
ehababoelnaga_multiple_disease_prediction_path = kagglehub.dataset_download('ehababoelnaga/multiple-disease-prediction')

print('Data source import complete.')

import pandas as pd # Import the pandas library and assign it to the alias 'pd'

df = pd.read_csv('blood_samples_dataset_test.csv') # Changed '-' to '=' to assign the DataFrame to the variable 'df'

#Requrired Libraries
import numpy as np
import pandas as pd
import warnings
warnings.filterwarnings('ignore')

#Preprocessing
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline
from sklearn.metrics import accuracy_score, classification_report

#Logistic Regression Models
from sklearn.linear_model import LogisticRegression, SGDClassifier
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from xgboost import XGBClassifier
from lightgbm import LGBMClassifier



# Check duplicates
n_duplicates = df.duplicated().sum()
print(f"Number of duplicate rows: {n_duplicates}")

# Remove duplicates
df = df.drop_duplicates()
print(f"Shape after removing duplicates: {df.shape}")

# Check class distribution
print("\nClass distribution:")
print(df['Disease'].value_counts())

#Collecting the features
features = []
target = 'Disease'

for name in df.columns:
    if name != target:
        features.append(name)

print(features)

#Collecting the features
features = []
target = 'Disease'

for name in df.columns:
    if name != target:
        features.append(name)

print(features)

X = df[features] # This line uses the features variable
y = df[target]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

#Defining the models
models = {
    'Logistic Regression': Pipeline([
        ('scaler', StandardScaler()),
        ('classifier', LogisticRegression(max_iter=1000, multi_class='multinomial'))
    ]),

    'SGD Classifier': Pipeline([
        ('scaler', StandardScaler()),
        ('classifier', SGDClassifier(max_iter=1000, random_state=42))
    ]),

    'Random Forest': Pipeline([
        ('classifier', RandomForestClassifier(
            n_estimators=100,
            max_depth=10,
            min_samples_split=5,
            min_samples_leaf=2,
            random_state=42
        ))
    ]),

    'Gradient Boosting': Pipeline([
        ('classifier', GradientBoostingClassifier(
            n_estimators=100,
            learning_rate=0.1,
            max_depth=5,
            random_state=42
        ))
    ])
}

for name, pipeline in models.items():
    print(f"\nTraining {name}...")

    # Train the model
    pipeline.fit(X_train, y_train)

    # Make predictions
    y_pred = pipeline.predict(X_test)

    # Calculate accuracy
    accuracy = accuracy_score(y_test, y_pred)

    # Perform cross-validation
    cv_scores = cross_val_score(pipeline, X_train, y_train, cv=5)

    # Print results
    print(f"Accuracy: {accuracy:.4f}")
    print(f"Cross-validation score: {cv_scores.mean():.4f} (+/- {cv_scores.std() * 2:.4f})")
    print("\nClassification Report:")
    print(classification_report(y_test, y_pred))